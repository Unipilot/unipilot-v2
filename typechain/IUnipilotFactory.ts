/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IUnipilotFactoryInterface extends utils.Interface {
  functions: {
    "createVault(address,address,uint24,uint160,string,string)": FunctionFragment;
    "getVaults(address,address,uint24)": FunctionFragment;
    "owner()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string, BigNumberish, BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "getVaults",
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "VaultCreated(address,address,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export type OwnerChangedEvent = TypedEvent<
  [string, string],
  { _oldOwner: string; _newOwner: string }
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export type VaultCreatedEvent = TypedEvent<
  [string, string, number],
  { _tokenA: string; _tokenB: string; fee: number }
>;

export type VaultCreatedEventFilter = TypedEventFilter<VaultCreatedEvent>;

export interface IUnipilotFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUnipilotFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVault(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      _sqrtPriceX96: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getVaults(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string] & { _vault: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  createVault(
    _tokenA: string,
    _tokenB: string,
    _fee: BigNumberish,
    _sqrtPriceX96: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getVaults(
    _tokenA: string,
    _tokenB: string,
    _fee: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    createVault(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      _sqrtPriceX96: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    getVaults(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnerChanged(address,address)"(
      _oldOwner?: string | null,
      _newOwner?: string | null,
    ): OwnerChangedEventFilter;
    OwnerChanged(
      _oldOwner?: string | null,
      _newOwner?: string | null,
    ): OwnerChangedEventFilter;

    "VaultCreated(address,address,uint24)"(
      _tokenA?: string | null,
      _tokenB?: string | null,
      fee?: null,
    ): VaultCreatedEventFilter;
    VaultCreated(
      _tokenA?: string | null,
      _tokenB?: string | null,
      fee?: null,
    ): VaultCreatedEventFilter;
  };

  estimateGas: {
    createVault(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      _sqrtPriceX96: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getVaults(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createVault(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      _sqrtPriceX96: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getVaults(
      _tokenA: string,
      _tokenB: string,
      _fee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
